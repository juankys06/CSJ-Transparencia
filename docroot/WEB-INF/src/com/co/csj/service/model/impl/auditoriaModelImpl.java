/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.co.csj.service.model.impl;

import com.co.csj.service.model.auditoria;
import com.co.csj.service.model.auditoriaModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the auditoria service. Represents a row in the &quot;ley_trans_auditoria&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.co.csj.service.model.auditoriaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link auditoriaImpl}.
 * </p>
 *
 * @author Equipo
 * @see auditoriaImpl
 * @see com.co.csj.service.model.auditoria
 * @see com.co.csj.service.model.auditoriaModel
 * @generated
 */
public class auditoriaModelImpl extends BaseModelImpl<auditoria>
	implements auditoriaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a auditoria model instance should use the {@link com.co.csj.service.model.auditoria} interface instead.
	 */
	public static final String TABLE_NAME = "ley_trans_auditoria";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id", Types.BIGINT },
			{ "modificado_por", Types.VARCHAR },
			{ "accion", Types.VARCHAR },
			{ "campo_modifico", Types.VARCHAR },
			{ "fecha", Types.TIMESTAMP },
			{ "ano_vigencia", Types.INTEGER },
			{ "cedula_funcionario", Types.VARCHAR },
			{ "log_anterior", Types.VARCHAR },
			{ "log_nuevo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ley_trans_auditoria (id LONG not null primary key IDENTITY,modificado_por VARCHAR(75) null,accion VARCHAR(75) null,campo_modifico VARCHAR(75) null,fecha DATE null,ano_vigencia INTEGER,cedula_funcionario VARCHAR(75) null,log_anterior VARCHAR(75) null,log_nuevo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ley_trans_auditoria";
	public static final String ORDER_BY_JPQL = " ORDER BY auditoria.fecha DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ley_trans_auditoria.fecha DESC";
	public static final String DATA_SOURCE = "appsportal";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.co.csj.service.model.auditoria"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.co.csj.service.model.auditoria"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.co.csj.service.model.auditoria"));

	public auditoriaModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return auditoria.class;
	}

	public String getModelClassName() {
		return auditoria.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("modificado_por", getModificado_por());
		attributes.put("accion", getAccion());
		attributes.put("campo_modifico", getCampo_modifico());
		attributes.put("fecha", getFecha());
		attributes.put("ano_vigencia", getAno_vigencia());
		attributes.put("cedula_funcionario", getCedula_funcionario());
		attributes.put("log_anterior", getLog_anterior());
		attributes.put("log_nuevo", getLog_nuevo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String modificado_por = (String)attributes.get("modificado_por");

		if (modificado_por != null) {
			setModificado_por(modificado_por);
		}

		String accion = (String)attributes.get("accion");

		if (accion != null) {
			setAccion(accion);
		}

		String campo_modifico = (String)attributes.get("campo_modifico");

		if (campo_modifico != null) {
			setCampo_modifico(campo_modifico);
		}

		Date fecha = (Date)attributes.get("fecha");

		if (fecha != null) {
			setFecha(fecha);
		}

		Integer ano_vigencia = (Integer)attributes.get("ano_vigencia");

		if (ano_vigencia != null) {
			setAno_vigencia(ano_vigencia);
		}

		String cedula_funcionario = (String)attributes.get("cedula_funcionario");

		if (cedula_funcionario != null) {
			setCedula_funcionario(cedula_funcionario);
		}

		String log_anterior = (String)attributes.get("log_anterior");

		if (log_anterior != null) {
			setLog_anterior(log_anterior);
		}

		String log_nuevo = (String)attributes.get("log_nuevo");

		if (log_nuevo != null) {
			setLog_nuevo(log_nuevo);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public String getModificado_por() {
		if (_modificado_por == null) {
			return StringPool.BLANK;
		}
		else {
			return _modificado_por;
		}
	}

	public void setModificado_por(String modificado_por) {
		_modificado_por = modificado_por;
	}

	public String getAccion() {
		if (_accion == null) {
			return StringPool.BLANK;
		}
		else {
			return _accion;
		}
	}

	public void setAccion(String accion) {
		_accion = accion;
	}

	public String getCampo_modifico() {
		if (_campo_modifico == null) {
			return StringPool.BLANK;
		}
		else {
			return _campo_modifico;
		}
	}

	public void setCampo_modifico(String campo_modifico) {
		_campo_modifico = campo_modifico;
	}

	public Date getFecha() {
		return _fecha;
	}

	public void setFecha(Date fecha) {
		_fecha = fecha;
	}

	public int getAno_vigencia() {
		return _ano_vigencia;
	}

	public void setAno_vigencia(int ano_vigencia) {
		_ano_vigencia = ano_vigencia;
	}

	public String getCedula_funcionario() {
		if (_cedula_funcionario == null) {
			return StringPool.BLANK;
		}
		else {
			return _cedula_funcionario;
		}
	}

	public void setCedula_funcionario(String cedula_funcionario) {
		_cedula_funcionario = cedula_funcionario;
	}

	public String getLog_anterior() {
		if (_log_anterior == null) {
			return StringPool.BLANK;
		}
		else {
			return _log_anterior;
		}
	}

	public void setLog_anterior(String log_anterior) {
		_log_anterior = log_anterior;
	}

	public String getLog_nuevo() {
		if (_log_nuevo == null) {
			return StringPool.BLANK;
		}
		else {
			return _log_nuevo;
		}
	}

	public void setLog_nuevo(String log_nuevo) {
		_log_nuevo = log_nuevo;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			auditoria.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public auditoria toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (auditoria)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		auditoriaImpl auditoriaImpl = new auditoriaImpl();

		auditoriaImpl.setId(getId());
		auditoriaImpl.setModificado_por(getModificado_por());
		auditoriaImpl.setAccion(getAccion());
		auditoriaImpl.setCampo_modifico(getCampo_modifico());
		auditoriaImpl.setFecha(getFecha());
		auditoriaImpl.setAno_vigencia(getAno_vigencia());
		auditoriaImpl.setCedula_funcionario(getCedula_funcionario());
		auditoriaImpl.setLog_anterior(getLog_anterior());
		auditoriaImpl.setLog_nuevo(getLog_nuevo());

		auditoriaImpl.resetOriginalValues();

		return auditoriaImpl;
	}

	public int compareTo(auditoria auditoria) {
		int value = 0;

		value = DateUtil.compareTo(getFecha(), auditoria.getFecha());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		auditoria auditoria = null;

		try {
			auditoria = (auditoria)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = auditoria.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<auditoria> toCacheModel() {
		auditoriaCacheModel auditoriaCacheModel = new auditoriaCacheModel();

		auditoriaCacheModel.id = getId();

		auditoriaCacheModel.modificado_por = getModificado_por();

		String modificado_por = auditoriaCacheModel.modificado_por;

		if ((modificado_por != null) && (modificado_por.length() == 0)) {
			auditoriaCacheModel.modificado_por = null;
		}

		auditoriaCacheModel.accion = getAccion();

		String accion = auditoriaCacheModel.accion;

		if ((accion != null) && (accion.length() == 0)) {
			auditoriaCacheModel.accion = null;
		}

		auditoriaCacheModel.campo_modifico = getCampo_modifico();

		String campo_modifico = auditoriaCacheModel.campo_modifico;

		if ((campo_modifico != null) && (campo_modifico.length() == 0)) {
			auditoriaCacheModel.campo_modifico = null;
		}

		Date fecha = getFecha();

		if (fecha != null) {
			auditoriaCacheModel.fecha = fecha.getTime();
		}
		else {
			auditoriaCacheModel.fecha = Long.MIN_VALUE;
		}

		auditoriaCacheModel.ano_vigencia = getAno_vigencia();

		auditoriaCacheModel.cedula_funcionario = getCedula_funcionario();

		String cedula_funcionario = auditoriaCacheModel.cedula_funcionario;

		if ((cedula_funcionario != null) && (cedula_funcionario.length() == 0)) {
			auditoriaCacheModel.cedula_funcionario = null;
		}

		auditoriaCacheModel.log_anterior = getLog_anterior();

		String log_anterior = auditoriaCacheModel.log_anterior;

		if ((log_anterior != null) && (log_anterior.length() == 0)) {
			auditoriaCacheModel.log_anterior = null;
		}

		auditoriaCacheModel.log_nuevo = getLog_nuevo();

		String log_nuevo = auditoriaCacheModel.log_nuevo;

		if ((log_nuevo != null) && (log_nuevo.length() == 0)) {
			auditoriaCacheModel.log_nuevo = null;
		}

		return auditoriaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", modificado_por=");
		sb.append(getModificado_por());
		sb.append(", accion=");
		sb.append(getAccion());
		sb.append(", campo_modifico=");
		sb.append(getCampo_modifico());
		sb.append(", fecha=");
		sb.append(getFecha());
		sb.append(", ano_vigencia=");
		sb.append(getAno_vigencia());
		sb.append(", cedula_funcionario=");
		sb.append(getCedula_funcionario());
		sb.append(", log_anterior=");
		sb.append(getLog_anterior());
		sb.append(", log_nuevo=");
		sb.append(getLog_nuevo());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.co.csj.service.model.auditoria");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modificado_por</column-name><column-value><![CDATA[");
		sb.append(getModificado_por());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accion</column-name><column-value><![CDATA[");
		sb.append(getAccion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>campo_modifico</column-name><column-value><![CDATA[");
		sb.append(getCampo_modifico());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fecha</column-name><column-value><![CDATA[");
		sb.append(getFecha());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ano_vigencia</column-name><column-value><![CDATA[");
		sb.append(getAno_vigencia());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cedula_funcionario</column-name><column-value><![CDATA[");
		sb.append(getCedula_funcionario());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>log_anterior</column-name><column-value><![CDATA[");
		sb.append(getLog_anterior());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>log_nuevo</column-name><column-value><![CDATA[");
		sb.append(getLog_nuevo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = auditoria.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			auditoria.class
		};
	private long _id;
	private String _modificado_por;
	private String _accion;
	private String _campo_modifico;
	private Date _fecha;
	private int _ano_vigencia;
	private String _cedula_funcionario;
	private String _log_anterior;
	private String _log_nuevo;
	private auditoria _escapedModelProxy;
}